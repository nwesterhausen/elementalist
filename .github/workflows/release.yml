name: Release

on:
  push:
    tags:
      - "*"

env:
  # update with the name of the main binary
  binary: elementalist
  add_binaries_to_github_release: true
  itch_target: nwesterhausen/elementalist
  tag_name: ${{ github.ref_name }}
  nightly_toolchain: nightly-2024-01-17
  # sccache enablement
  SCCACHE_GHA_ENABLED: true
  RUSTC_WRAPPER: sccache

permissions:
  contents: read

jobs:
  trim_version:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.trim.outputs.tag_name }}
    steps:
      - id: trim
        run: echo "tag_name=$(echo ${{ github.ref_name }} | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')" >> $GITHUB_OUTPUT

  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write

    steps:
      - uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd # 0.0.4
      - uses: dtolnay/rust-toolchain@bb45937a053e097f8591208d8e74c90db1873d07 # master
        with:
          targets: x86_64-unknown-linux-gnu
          toolchain: ${{ env.nightly_toolchain }}
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Show sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats >> $GITHUB_STEP_SUMMARY
      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r game/assets linux/
          cp -r game_data linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-linux-${{ env.tag_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write

    steps:
      - uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd # 0.0.4
      - uses: dtolnay/rust-toolchain@bb45937a053e097f8591208d8e74c90db1873d07 # master
        with:
          targets: x86_64-pc-windows-msvc
          toolchain: ${{ env.nightly_toolchain }}

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Show sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats >> $GITHUB_STEP_SUMMARY
      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r game/assets windows/
          cp -r game_data windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-windows-${{ env.tag_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS x86_64 and aarch64
  release-macOS:
    runs-on: macOS-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write

    steps:
      - uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit
      - uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd # 0.0.4
      - uses: dtolnay/rust-toolchain@bb45937a053e097f8591208d8e74c90db1873d07 # master
        with:
          targets: x86_64-apple-darwin, aarch64-apple-darwin
          toolchain: ${{ env.nightly_toolchain }}
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Install Dependencies
        run: |
          brew install llvm
          ln -s /opt/homebrew/opt /usr/local/opt
      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin # Intel
          cargo build --release --target aarch64-apple-darwin # Apple Silicon

      - name: Show sccache stats
        shell: bash
        run: ${SCCACHE_PATH} --show-stats >> $GITHUB_STEP_SUMMARY
      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          mkdir -p ${{ env.binary }}.app/Contents/Resources

          cp game_assets/Info.plist ${{ env.binary }}.app/Contents/
          cp game_assets/Icon/icon.icns ${{ env.binary }}.app/Contents/Resources/

          cp -r game/assets ${{ env.binary }}.app/Contents/MacOS/
          cp -r game_data ${{ env.binary }}.app/Contents/MacOS/

          lipo "target/x86_64-apple-darwin/release/${{ env.binary }}" \
            "target/aarch64-apple-darwin/release/${{ env.binary }}" \
            -create -output ${{ env.binary }}.app/Contents/MacOS/${{ env.binary }}

          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          path: ${{ env.binary }}-macOS.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS.dmg
          asset_name: ${{ env.binary }}-macOS-${{ env.tag_name }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$itch_target" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT
          fi

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - trim_version
      - check-if-upload-to-itch-is-configured
      # - release-wasm
      - release-linux
      - release-windows
      - release-macOS
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}

    steps:
      - uses: step-security/harden-runner@a4aa98b93cab29d9b1101a6143fb8bce00e2eac4 # v2.7.1
        with:
          egress-policy: audit
      - name: Download artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ needs.trim_version.outputs.tag_name }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
          done
