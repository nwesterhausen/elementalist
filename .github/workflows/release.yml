name: Release

on:
  push:
    tags:
      - '*'

env:
  # update with the name of the main binary
  binary: elementalist
  add_binaries_to_github_release: true
  itch_target: nwesterhausen/elementalist
  tag_name: ${{ github.ref_name }}
  nightly_toolchain: nightly-2024-01-17

permissions:
  contents: read

jobs:
  trim_version:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.trim.outputs.tag_name }}
    steps:
      - id: trim
        run: echo tag_name=$(echo ${{ github.ref_name }} | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p' >> $GITHUB_OUTPUT)
  # Build for wasm
  # release-wasm:
  #   runs-on: ubuntu-latest
  #   # To upload artifacts, contents write permission is required
  #   permissions:
  #     contents: write

  #   steps:
  #     - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
  #       with:
  #         egress-policy: audit
  #     - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
  #     - uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca # stable
  #       with:
  #         targets: wasm32-unknown-unknown
  #         toolchain: ${{ env.nightly_toolchain }}
  #     - name: Install wasm-bindgen-cli
  #       run: |
  #         cargo install wasm-bindgen-cli

  #     - name: Build
  #       run: |
  #         cargo build --release --target wasm32-unknown-unknown

  #     - name: Prepare package
  #       run: |
  #         wasm-bindgen --no-typescript --out-name bevy_game --out-dir wasm --target web target/wasm32-unknown-unknown/release/${{ env.binary }}.wasm
  #         cp -r game/assets wasm/
  #         cp -r game_data wasm/
  #         cp game/web/index.html wasm/

  #     - name: Package as a zip
  #       working-directory: ./wasm
  #       run: |
  #         zip --recurse-paths ../${{ env.binary }}.zip .

  #     - name: Upload binaries to artifacts
  #       uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4
  #       with:
  #         path: ${{ env.binary }}.zip
  #         name: wasm
  #         retention-days: 1

  #     - name: Upload binaries to release
  #       if: ${{ env.add_binaries_to_github_release == 'true' }}
  #       uses: svenstaro/upload-release-action@1beeb572c19a9242f4361f4cee78f8e0d9aec5df # v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: ${{ env.binary }}.zip
  #         asset_name: ${{ env.binary }}-wasm-${{ env.tag_name }}.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true

  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write

    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca # stable
        with:
          targets: x86_64-unknown-linux-gnu
          toolchain: ${{ env.nightly_toolchain }}
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r game/assets linux/
          cp -r game_data linux/

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@1beeb572c19a9242f4361f4cee78f8e0d9aec5df # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-linux-${{ env.tag_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write

    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca # stable
        with:
          targets: x86_64-pc-windows-msvc
          toolchain: ${{ env.nightly_toolchain }}

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          cp -r game/assets windows/
          cp -r game_data windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@1beeb572c19a9242f4361f4cee78f8e0d9aec5df # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-windows-${{ env.tag_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS x86_64
  release-macOS-intel:
    runs-on: macOS-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write

    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca # stable
        with:
          targets: x86_64-apple-darwin
          toolchain: ${{ env.nightly_toolchain }}
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          brew install llvm
          cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r game/assets ${{ env.binary }}.app/Contents/MacOS/
          cp -r game_data ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS-intel.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4
        with:
          path: ${{ env.binary }}-macOS-intel.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@1beeb572c19a9242f4361f4cee78f8e0d9aec5df # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-intel.dmg
          asset_name: ${{ env.binary }}-macOS-intel-${{ env.tag_name }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS Apple Silicon
  release-macOS-apple-silicon:
    runs-on: macOS-latest
    # To upload artifacts, contents write permission is required
    permissions:
      contents: write
    env:
      # macOS 11 was the first version to support ARM
      MACOSX_DEPLOYMENT_TARGET: 11
    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - uses: dtolnay/rust-toolchain@78c6b5541adb5849f5d72d15da722aedb26327ca # stable
        with:
          targets: aarch64-apple-darwin
          toolchain: ${{ env.nightly_toolchain }}
      - name: Setup LLVM
        run: |
          # seems to be we need to install LLVM via brew.
          brew install llvm
          # Brew suggests a couple other exports during the LLVM install
          export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
          export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
          export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
      - name: Build
        run: |
          # This fails the final linking step with error:
          # "note: clang: error: invalid linker name in argument '-fuse-ld=/opt/homebrew/opt/llvm/bin/ld64.lld'"
          cargo build --release --target aarch64-apple-darwin
      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r game/assets ${{ env.binary }}.app/Contents/MacOS/
          cp -r game_data ${{ env.binary }}.app/Contents/MacOS/
          hdiutil create -fs HFS+ -volname "${{ env.binary }}-macOS-apple-silicon" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4
        with:
          path: ${{ env.binary }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@1beeb572c19a9242f4361f4cee78f8e0d9aec5df # v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-apple-silicon.dmg
          asset_name: ${{ env.binary }}-macOS-apple-silicon-${{ env.tag_name }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$itch_target" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT
          fi

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - trim_version
      - check-if-upload-to-itch-is-configured
      # - release-wasm
      - release-linux
      - release-windows
      - release-macOS-intel
      - release-macOS-apple-silicon
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}

    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit
      - name: Download artifacts
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ needs.trim_version.outputs.tag_name }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
          done
