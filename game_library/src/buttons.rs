use bevy::{ecs::system::SystemId, prelude::*};

use crate::colors;

/// Component representing a button. This component is used to create buttons in the UI.
///
/// Each button has a `SystemId` which should be the id of a system that will handle the button's
/// "pressed" event. The `SystemId` is generated by calling `world.register_system` on the world.
#[derive(Component, Clone, Debug)]
pub struct ButtonSystem {
    /// The id of the system that will handle the "pressed" event of the button
    pub pressed_event: Option<SystemId>,
    // pub hover_event: Option<SystemId>,
    // pub reset_event: Option<SystemId>,
}

/// Tag component used to mark which setting is currently selected (e.g. in a radio group or a toggle)
#[derive(Component)]
pub struct SelectedOption;

/// System which handles button events.
pub fn handle_button_events(
    button_query: Query<
        (
            &Interaction,
            &Children,
            &ButtonSystem,
            Option<&SelectedOption>,
        ),
        Changed<Interaction>,
    >,
    mut commands: Commands,
    mut text_query: Query<&mut Text>,
) {
    for (interaction, children, button_system, selected) in &button_query {
        // Try to grab the text component of the button, and if we can't we will just skip (continue)
        // We are changing the text color and not the button color because drawing big squares is dumb. :)
        let Ok(mut text) = text_query.get_mut(children[0]) else {
            tracing::error!("Button has no text (and was probably supposed to)");
            continue;
        };
        // Match the interaction and selected option to change the text color
        // i.e., hover, not-hover & selected, pressed, and not-pressed & not selected. (or close that that)
        // If interaction is Pressed, run the pressed event system
        match (*interaction, selected) {
            (Interaction::Pressed, _) | (Interaction::None, Some(_)) => {
                text.sections[0].style.color = colors::SELECTED_TEXT_COLOR;
                if let Some(pressed_event) = button_system.pressed_event {
                    commands.run_system(pressed_event);
                }
            }
            (Interaction::Hovered, Some(_)) => {
                text.sections[0].style.color = colors::HOVERED_TEXT_COLOR_ALTERNATE;
            }
            (Interaction::Hovered, None) => {
                text.sections[0].style.color = colors::HOVERED_TEXT_COLOR;
            }
            (Interaction::None, None) => text.sections[0].style.color = colors::TEXT_COLOR,
        }
    }
}
